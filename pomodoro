#!/usr/bin/env bash

# Pomodoro timer
# There are a few options:
# `pomodoro` by itself will start a timer that will end 5 minutes before the next even multiple of 30 minutes, and then
# start a 5 minute timer. This is also an alias for `pomodoro short`
# `pomodoro break` will start a break timer -- i.e., a 5 minute timer.
# `pomodoro long` will start a long pomodoro timer -- i.e., one that will end at the next multiple of a half hour
# that's at least 30 minutes away from the current time. So if you do `pomodoro long` at 12:15, the pomodoro timer will
# end at 12:50 and then you'll get a 10 minute break timer. If you do `pomodoro long` at 12:31, the timer will end at
# 1:20 and you'll get a 10 minute timer.
# And in either case you can add a 

action="${1}"
if [[ -z $action ]]; then
    action="short"
fi

shift

taskName="${@}"
if [[ -z $taskName ]]; then
  taskName="work"
fi

trap stopTimer INT TERM

function stopTimer() {
  timew stop 2>/dev/null 1>/dev/null
  timew summary :annotation
  exit
}

function ringDingDing() {
    message="${1}"
    # instead of icon stop, we could also use "caution" and "note"
    #osascript -e 'tell app "System Events" to display dialog "Pomodoro finished" with title "Pomodoro finished" buttons {"OK"} with icon stop'
    osascript -e 'tell app "System Events" to display dialog "'"${message}"'" with title "'"${message}"'" buttons {"OK"} with icon POSIX file "/System/Library/CoreServices/CoreTypes.bundle/Contents/Resources/Clock.icns"' &>/dev/null &
    afplay /System/Library/Sounds/Hero.aiff &
    sleep 0.2
    afplay /System/Library/Sounds/Hero.aiff &
    sleep 0.2
    afplay /System/Library/Sounds/Hero.aiff &
}

function pomodoroSession() {
    # No matter when we start the pomodoro session, we're going to run it until 5m before the next half-hour boundary
    # That way we don't have to manually coordinate pomodoros and meetings
    currentMinute=$(date +%-M)
    currentSeconds=$(date +%-S)
    pomodoroSeconds=$((60-$currentSeconds))
    if [[ $currentMinute -ge 30 ]]; then
        pomodoroMinutes=$((59-$currentMinute-5))
    else
        pomodoroMinutes=$((29-$currentMinute-5))
    fi

    # Time the working portion
    frankmer ${pomodoroMinutes}m ${pomodoroSeconds}s

    ringDingDing "Pomodoro finished"

    pomodoroBreak

}

function pomodoroBreak() {
    timew start break || exit 1
    timew annotate "break"

    # Time the break portion
    frankmer 5m

    ringDingDing "Break finished"

    timew stop
}

# Terminate the active task if there is one
timew stop 1>/dev/null 2>&1

# start timewarrior
timew start pomodoro || exit 1
timew annotate "${taskName}"

case $action in
    break)
        pomodoroBreak
        ;;
    *)
        pomodoroSession
        ;;
esac

timew summary :annotation